{"version":3,"sources":["components/Header/index.js","components/Error/index.js","components/Loading/index.js","components/Event/index.js","components/Events/index.js","components/Highlights/index.js","components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","div","InnerContainer","Header","Error","error","message","LoadingContainer","Loading","CircularProgress","useStyles","makeStyles","root","maxWidth","marginTop","marginLeft","media","height","Event","desc","event","classes","Card","className","CardActionArea","CardMedia","image","eventImage","title","CardContent","Typography","gutterBottom","variant","component","color","description","slice","CardActions","Button","size","theme","flexGrow","control","padding","spacing","Events","events","Grid","container","item","xs","justify","map","key","id","Highlights","React","useState","highlights","setHighlights","isLoaded","setIsLoaded","useEffect","fetch","then","res","json","result","console","log","fakeWait","value","Promise","resolve","setTimeout","Container","TwoColumnLayout","Layout","setError","setEvents","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a23c6dea.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from '@emotion/styled';\n\nconst HeaderContainer = styled.div`\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  padding: 1rem;\n  \n  text-align:left;\n  border-bottom: 1px solid black;\n  width:100%;\n`;\n\nconst InnerContainer = styled.div`\n  width:100%;\n  max-width:1120px;\n`;\n\n\nfunction Header() {\n  return <HeaderContainer>\n            <InnerContainer>\n              <h1>Events</h1>\n            </InnerContainer>\n         </HeaderContainer>\n\n}\n\nexport default Header;","import React from 'react';\n\nfunction Error({error}) {\n  return <div>Error: {error.message}</div>\n}\n\nexport default Error;","import React from 'react';\nimport styled from '@emotion/styled';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst LoadingContainer = styled.div`\n  display:flex;\n  padding:1rem;\n  align-items:center;\n  justify-content: center;\n  height:100vh;\n  width:100%;\n`;\n\nfunction Loading() {\n  return <LoadingContainer>\n          <CircularProgress />\n         </LoadingContainer>\n}\n\nexport default Loading;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport './index.css';\n\nEvent.propTypes = {\n  event: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    eventImage: PropTypes.string,\n    description: PropTypes.string,\n    dates: PropTypes.arrayOf(PropTypes.string),\n    location: PropTypes.string,\n  }),\n};\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 300,\n    marginTop: 10,\n    marginLeft:20,\n  },\n  media: {\n    height: 150,\n  },\n  \n});\n\nfunction shortDesc(desc)\n{\n  return `${desc.slice(0,100)}...`;\n}\n\nfunction Event({ event }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={event.eventImage}\n          title={event.title}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {event.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n           {shortDesc(event.description)}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default Event;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Event from \"../Event\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}));\n\nfunction Events({ events }) {\n\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container justify=\"flex-start\">\n          {events.map((event) => (\n            <Event event={event} key={event.id} />\n          ))}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Events;\n","import React from 'react';\n\nimport Events from '../Events';\nimport Loading from '../Loading';\n\nfunction Highlights() {\n  const [highlights, setHighlights] = React.useState([]);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:3000/events/featured\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setHighlights(result.events);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  }, []);\n\n\n  if (!isLoaded) \n    return <Loading />\n  else    \n    return <Events events={highlights} />\n}\n\nexport default Highlights;","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport Error from \"../Error\";\nimport Loading from \"../Loading\";\nimport Events from \"../Events\";\nimport HighLights from \"../Highlights\";\n\nconst fakeWait = (value) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(value);\n    }, 1000);\n  });\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  width: 100%;\n`;\n\nconst InnerContainer = styled.div`\n  width: 100%;\n  max-width: 1120px;\n`;\n\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 70% 30%;\n  grid-column-gap: 1rem;\n`;\n\nfunction Layout() {\n  const [error, setError] = React.useState(null);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [events, setEvents] = React.useState([]);\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:3000/events\")\n      .then(fakeWait)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setEvents(result.events);\n        },\n        (error) => {\n          console.log(error);\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  if (error) {\n    return <Error error={error} />;\n  } else if (!isLoaded) {\n    return <Loading />;\n  } else {\n    return (\n      <Container>\n        <InnerContainer>\n          <TwoColumnLayout>\n            <Events events={events} />\n            <HighLights />\n          </TwoColumnLayout>\n        </InnerContainer>\n      </Container>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\n\n\nimport \"./App.css\";\nimport Header from './components/Header';\nimport Layout from './components/Layout';\n\nfunction App() {\n\n  return (\n    <div>\n      <Header/>\n      <Layout/>\n    </div>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}